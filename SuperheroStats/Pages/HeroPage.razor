@page "/hero/{heroName}"
@using SuperheroStats.Services
@using SuperheroStats.Data
@using System.Text.Json
@using System.Reflection
@using System.Globalization
@using System.Collections
@using System.Text.RegularExpressions



@*@if (hero == null)
	{
	<h1>Loading Data...</h1>
	}*@
<div class="container">
	<div class="row">
		@*Left column with Character picture and name*@
		<div class="col-lg-3">
			<div class="row-fluid" id="hero-avatar-container">
				@*Image by default is displayed as inline-block, 
				you need to display it as block in order to center it with .mx-auto. 
				This can be done with built-in .d-block*@
				<img src="@hero.images.lg" class="shadow-lg mb-3 mx-auto d-block" id="hero-avatar" alt="@hero.name"/>
				<div class="row text-center">
					<h1 class="fw-bold" id="hero-name">@hero.name</h1>
					<h2>@hero.biography.fullName</h2>
				</div>
			</div>
		</div>
		@*Middle columns Contains the cards with stats and info*@
		<div class="col-lg-7">
			@*Card to show power statistics *@
			<div class="card shadow mb-5">
				<div class="card-header">
					<h3 class="fw-bold">Power Stats</h3>
				</div>
				<div class="card-body">
					<table class="table table-borderless" id="hero-powerstats-table">
						<tbody>
						@*	Iterating through the properties of the Hero Powerstats object
							https://www.codegrepper.com/code-examples/csharp/c%23+iterate+over+object+properties
							Displaying the powerstat name*@
						@foreach (PropertyInfo prop in hero.powerstats.GetType().GetProperties())
						{
							var propValue = (int) (prop.GetValue(hero.powerstats, null) ?? 0);
							var propName = ti.ToTitleCase(prop.Name);
							@*Change the color of the progress bar depending on the value of the powerstat*@
							var progressColor = "";
							if (propValue <= 25)
								progressColor = "bg-danger";
							else if (propValue <= 50)
								progressColor = "bg-warning";
							else if (propValue <= 75)
								progressColor = "bg-info";
							else
								progressColor = "bg-primary";
							<tr>
								<th scope="row" class="powerstat-name">@propName</th>
								<td class="powerstat-value text-end">@propValue</td>
								@*the w-* class is used to make the progress bar the desired size in the table*@
								<td class="powerstat-value w-75">
									<div class="progress powerstat-progress mb-2">
										<div class="progress-bar @progressColor" role="progressbar" style="width: @propValue%" aria-valuenow="@propValue" aria-valuemin="0" aria-valuemax="100"></div>
									</div>
								</td>
							</tr>
						}
						</tbody>
					</table>
				</div>
			</div>
			
			<div class="card shadow mb-5">
				<h3 class="card-header fw-bold">Appearance</h3>
				<div class="card-body">
					<table class="table table-hover">
						<tbody>
						@foreach (PropertyInfo prop in hero.appearance.GetType().GetProperties())
						{
							var propValue = DeliminateStringIfList(prop.GetValue(hero.appearance, null));
							var propName = ti.ToTitleCase(ToSentenceCase(prop.Name));
							<tr>
								<th class="powerstat-name">@propName</th>
								<td class="powerstat-value">@propValue</td>
							</tr>
						}
						</tbody>
					</table>
				</div>
			</div>
			
			<div class="card shadow mb-5">
				<h3 class="card-header fw-bold">Biography</h3>
				<div class="card-body">
					<table class="table table-hover">
						<tbody>
						@foreach (PropertyInfo prop in hero.biography.GetType().GetProperties())
						{
							var propValue = DeliminateStringIfList(prop.GetValue(hero.biography, null));
							var propName = ti.ToTitleCase(ToSentenceCase(prop.Name));
							<tr>
								<th class="powerstat-name">@propName</th>
								<td class="powerstat-value">@propValue</td>
							</tr>
						}
						</tbody>
					</table>
				</div>
			</div>

			<div class="card shadow mb-5">
				<h3 class="card-header fw-bold">Work</h3>
				<div class="card-body">
					<table class="table table-hover">
						<tbody>
						@foreach (PropertyInfo prop in hero.work.GetType().GetProperties())
						{
							var propValue = DeliminateStringIfList(prop.GetValue(hero.work, null));
							var propName = ti.ToTitleCase(ToSentenceCase(prop.Name));
							<tr>
								<th class="powerstat-name">@propName</th>
								<td class="powerstat-value">@propValue</td>
							</tr>
						}
						</tbody>
					</table>
				</div>
			</div>

			@*Card template*@
			<div class="card shadow mb-5">
				<h3 class="card-header fw-bold">Appearance</h3>
				<div class="card-body">
					<h5 class="card-title">Special title treatment</h5>
					<p class="card-text">With supporting text below as a natural lead-in to additional content.</p>
				</div>
			</div>
		</div>
		@*Right Column that contains Contains misc info*@
		<div class="col-lg-2">
			
		</div>

	</div>
</div>



@code {
	[Parameter]
	public string heroName { get; set; }

	[Inject]
	public IHeroService HeroService { get; set; }

	static readonly string jsonData = System.IO.File.ReadAllText("wwwroot/sample-data/hero-sample.json");

	private Hero hero { get; set; } = JsonSerializer.Deserialize<Hero>(jsonData);


	readonly TextInfo ti = CultureInfo.CurrentCulture.TextInfo;

	//protected override async Task OnInitializedAsync() => await GetHeroDetails(heroName);


	private async Task GetHeroDetails(string heroName)
	{
		hero = (await HeroService.GetHero(heroName));
	}

	// This is for values in the Hero API that have both lists and strings
	// For example, under Hero.Appearance there are some values that are strings and others are lists
	// This function is needed in order to handle the list values
	// This allows us to loop through the values in the razor page without writing if statements in each one to check for type
	private object DeliminateStringIfList(object value)
	{
		// If value is not the Ilist string value type then just return the string value
		if (value is not IList || !value.GetType().IsGenericType) return value;
		// Convert object to List<string> in order to use the string.Join method
		var valueListOfStrings = value as IList<string>;
		return string.Join(", ", valueListOfStrings);
	}

	public string ToSentenceCase(string str)
	{
		return Regex.Replace(str, "[a-z][A-Z]", m => $"{m.Value[0]} {char.ToLower(m.Value[1])}");
	}

}
