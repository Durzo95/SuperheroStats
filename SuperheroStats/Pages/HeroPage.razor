@page "/hero/{heroName}"
@using SuperheroStats.Services
@using SuperheroStats.Data
@using System.Text.Json
@using System.Reflection
@using System.Globalization
@using System.Collections
@using System.Text.RegularExpressions
@using Microsoft.AspNetCore.Mvc.Diagnostics



@if (hero == null)
	{
	<h1>Loading Data...</h1>
	}
else
{
	<div class="container">
	<div class="row">

		@*Left column with Character picture and name*@
		<div class="col-lg-4">
			<div class="row-fluid" id="hero-avatar-container">
				@*Image by default is displayed as inline-block, 
				you need to display it as block in order to center it with .mx-auto. 
				This can be done with built-in .d-block*@
				<img src="@hero.images.lg" class="shadow-lg mb-3 mx-auto d-block" id="hero-avatar" alt="@hero.name"/>
				<div class="row text-center">
					<h1 class="fw-bold" id="hero-name">@hero.name</h1>
					<h2>@hero.biography.fullName</h2>
				</div>
			</div>
			<br/>
			<h4>Affiliations</h4>
			@if (colorIndex != 0)
			{
				colorIndex = 0;
			}
			@foreach (var aff in hero.connections.groupAffiliation.Split(", ").ToList())
			{
				if (colorIndex >= bootstrapColors.Count)
				{
					colorIndex = 0;
				}
				<span class="badge rounded-pill hero-pill @bootstrapColors[colorIndex]">@aff</span>
				colorIndex++;
			}

			<br/>
		</div>

		@*Middle columns Contains the cards with stats and info*@
		<div class="col-lg">
			@*Card to show power statistics *@
			<ProgressBarCard AttributeName="@hero.powerstats"></ProgressBarCard>
			@*Card to show appearance data *@
			<BasicCardTable AttributeName="@hero.appearance"></BasicCardTable>
			@*Card to show biography data *@
			<BasicCardTable AttributeName="@hero.biography"></BasicCardTable>
			@*Card to show work data *@
			<BasicCardTable AttributeName="@hero.work"></BasicCardTable>

		</div>
	</div>
</div>

}



@code {
	[Parameter]
	public string heroName { get; set; }

	[Inject]
	public IHeroService? HeroService { get; set; }

	readonly TextInfo ti = CultureInfo.CurrentCulture.TextInfo;

	private static Hero? hero = null;


	protected override async Task OnInitializedAsync()
	{
		hero = await HeroService.GetHero(heroName);
	}

	private readonly List<string> bootstrapColors = new List<string>{"bg-primary", "bg-danger", 
															"bg-warning text-dark", "bg-info text-dark"};

	// The color index used to loop through the bootstrap colors when filling out the pills on the page
	// It just looked bad when using random colors most of the time
	// so sticking with looping through a good pallete instead
	public int colorIndex = 0;

	//protected override async Task OnInitializedAsync() => await GetHeroDetails(heroName);


	//private async Task GetHeroDetails(string heroName)
	//{
	//	hero = (await HeroService.GetHero(heroName));
	//}

	// This is for values in the Hero API that have both lists and strings
	// For example, under Hero.Appearance there are some values that are strings and others are lists
	// This function is needed in order to handle the list values
	// This allows us to loop through the values in the razor page without writing if statements in each one to check for type
	private object DeliminateStringIfList(object value)
	{
		// If value is not the Ilist string value type then just return the string value
		if (value is not IList || !value.GetType().IsGenericType) 
			return value;
		// Convert object to List<string> in order to use the string.Join method
		return value is IList<string> valueListOfStrings ? string.Join(", ", valueListOfStrings) : "-";
	}
	// Converts pascal case strings into space deliminated string
	// Used for the type names in the classes when looping
	public string ToSentenceCase(string str)
	{
		return Regex.Replace(str, "[a-z][A-Z]", m => $"{m.Value[0]} {char.ToLower(m.Value[1])}");
	}

}
